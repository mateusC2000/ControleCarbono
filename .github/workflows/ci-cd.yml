# .github/workflows/ci-cd.yml

# Nome do Workflow que aparecerá na aba "Actions" do GitHub
name: CI/CD Pipeline - ControleCarbono

# Gatilhos (Triggers): Define quando o workflow deve ser executado
on:
  # Executa em todo push para a branch 'main'
  push:
    branches:
      - main
  # Permite que o workflow seja executado manualmente a partir da interface do GitHub
  workflow_dispatch:

# Permissões para o token do GitHub usado no workflow
permissions:
  contents: read
  id-token: write

jobs:
  # 1. Job de Build e Teste
  build-and-test:
    name: Build e Testes
    runs-on: ubuntu-latest # Executa em uma máquina virtual Linux (Ubuntu)

    steps:
      # Passo 1: Clona o repositório para a máquina virtual
      - name: ⬇️ Checkout do código
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente Node.js (ajuste a versão conforme seu projeto)
      - name: ⚙️ Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm' # Habilita o cache para as dependências do npm

      # Passo 3: Instala as dependências do projeto
      - name: 📦 Instalar dependências
        run: npm ci # 'ci' é mais rápido e seguro para automação do que 'install'

      # Passo 4: Executa os testes automatizados (requisito da atividade)
      - name: 🧪 Executar testes
        run: npm test

      # Passo 5: Gera a build da aplicação (requisito da atividade)
      - name: 🏗️ Gerar build da aplicação
        run: npm run build

      # Passo 6: Salva o artefato da build para ser usado nos jobs de deploy
      - name: ⬆️ Upload do artefato da build
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact # Nome do artefato
          path: dist/ # Caminho da pasta de build (ajuste se for 'build' ou outro)

  # 2. Job de Deploy para Staging (Homologação)
  deploy-staging:
    name: Deploy para Staging
    needs: build-and-test # Depende do sucesso do job 'build-and-test'
    runs-on: ubuntu-latest
    environment:
      name: staging # Define o ambiente do GitHub

    steps:
      # Passo 1: Baixa o artefato da build gerado no job anterior
      - name: ⬇️ Download do artefato da build
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      # Passo 2: Simula o deploy para o ambiente de staging
      # SUBSTITUA ESTE PASSO PELOS SEUS COMANDOS REAIS DE DEPLOY
      - name: 🚀 Deploy para Staging
        run: |
          echo "🚀 Fazendo deploy da build para o ambiente de Staging..."
          # Exemplo: Copiar arquivos para um servidor via SSH/SCP
          # scp -r . user@staging-server:/var/www/html
          echo "✅ Deploy em Staging concluído."

  # 3. Job de Deploy para Produção (com aprovação manual)
  deploy-production:
    name: Deploy para Produção
    needs: deploy-staging # Depende do sucesso do deploy em staging
    runs-on: ubuntu-latest
    environment:
      name: production # Define o ambiente de produção

    steps:
      # Passo 1: Baixa o artefato da build
      - name: ⬇️ Download do artefato da build
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      # Passo 2: Simula o deploy para o ambiente de produção
      # SUBSTITUA ESTE PASSO PELOS SEUS COMANDOS REAIS DE DEPLOY
      - name: 🚀 Deploy para Produção
        run: |
          echo "🚀 Fazendo deploy da build para o ambiente de Produção..."
          # Exemplo: Usar o CLI da AWS para sincronizar com um bucket S3
          # aws s3 sync . s3://meu-bucket-de-producao
          echo "✅ Deploy em Produção concluído."
